name: Terraform Security Audit

on:
  # Trigger on pull requests that change .tf files
  pull_request:
    paths:
      - '**.tf'
  # Trigger on pushes to the main branch that change .tf files
  push:
    branches:
      - main
    paths:
      - '**.tf'
  # Allow the workflow to be run manually from the Actions tab
  workflow_dispatch:
    inputs:
      filepath:
        description: 'Path to the Terraform file to audit'
        required: true
        default: 'test'

permissions:
  pull-requests: write

jobs:
  iac-security-audit:
    runs-on: ubuntu-latest
    outputs:
      audit-results: ${{ steps.audit_step.outputs.audit_results }}
      audit-outcome: ${{ steps.audit_step.outcome }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run AI Security Auditor
        id: audit_step
        run: |
          FILEPATH="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.filepath || 'test' }}"
          
          echo "üîç Running security audit on: $FILEPATH"
          
          # Capture both stdout and stderr
          if python3 main.py "$FILEPATH" > audit_output.txt 2>&1; then
            AUDIT_RESULT="success"
            echo "‚úÖ Security audit passed"
          else
            AUDIT_RESULT="failed"
            echo "‚ùå Security audit failed"
          fi
          
          # Read the output and set as output variable (escape newlines)
          AUDIT_OUTPUT=$(cat audit_output.txt | sed ':a;N;$!ba;s/\n/\\n/g' | sed 's/"/\\"/g')
          echo "audit_results=$AUDIT_OUTPUT" >> $GITHUB_OUTPUT
          echo "audit_outcome=$AUDIT_RESULT" >> $GITHUB_OUTPUT
          
          # Display the results
          cat audit_output.txt
          
          # Exit with appropriate code
          if [ "$AUDIT_RESULT" = "failed" ]; then
            exit 1
          fi
        env:
          HUGGING_FACE_HUB_TOKEN: ${{ secrets.HUGGING_FACE_HUB_TOKEN }}

      - name: Check Audit Results
        if: ${{ failure() && steps.audit_step.outcome == 'failure' }}
        run: |
          echo "‚ùå AI Security Auditor found vulnerabilities. Failing the workflow."
  
  add-pr-comment:
    needs: iac-security-audit
    runs-on: ubuntu-latest
    # This condition ensures the job runs on pull requests regardless of audit outcome
    if: always() && github.event_name == 'pull_request'
    steps:
      - name: Post Audit Results as a PR Comment
        uses: actions/github-script@v7
        with:
          script: |
            const auditOutcome = `${{ needs.iac-security-audit.outputs.audit-outcome }}`;
            const auditResults = `${{ needs.iac-security-audit.outputs.audit-results }}`;
            const filepath = `${{ github.event_name == 'workflow_dispatch' && github.event.inputs.filepath || 'test' }}`;
            
            let commentBody = `## üîç AI Security Audit Results\n\n`;
            commentBody += `**Path analyzed:** \`${filepath}\`\n\n`;
            
            if (auditOutcome === 'success') {
              commentBody += `‚úÖ **PASSED** - No security vulnerabilities detected!\n\n`;
              commentBody += `All Terraform files have been analyzed and no security issues were found.`;
            } else {
              commentBody += `‚ùå **FAILED** - Security vulnerabilities detected!\n\n`;
              commentBody += `**Detailed Results:**\n\n`;
              if (auditResults && auditResults.trim()) {
                commentBody += '```\n' + auditResults + '\n```';
              } else {
                commentBody += `Please check the workflow run for detailed vulnerability information.`;
              }
              commentBody += `\n\n**Next Steps:**\n`;
              commentBody += `1. Review the vulnerability details above\n`;
              commentBody += `2. Apply the recommended fixes to your Terraform code\n`;
              commentBody += `3. Push your changes to re-run the security audit\n\n`;
              commentBody += `**Resources:**\n`;
              commentBody += `- [Terraform Security Best Practices](https://docs.bridgecrew.io/docs/terraform)\n`;
              commentBody += `- [AWS Security Groups](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html)`;
            }
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });