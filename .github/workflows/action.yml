name: Terraform Security Audit

on:
  # Trigger on pull requests that change .tf files
  pull_request:
    paths:
      - '**.tf'
  # Trigger on pushes to the main branch that change .tf files
  push:
    branches:
      - main
    paths:
      - '**.tf'
  # Allow the workflow to be run manually from the Actions tab
  workflow_dispatch:
    inputs:
      filepath:
        description: 'Path to the Terraform file to audit'
        required: true
        default: 'test'

permissions:
  pull-requests: write

jobs:
  iac-security-audit:
    runs-on: ubuntu-latest
    outputs:
      audit-results: ${{ steps.audit_step.outputs.audit_results }}
      audit-outcome: ${{ steps.audit_step.outcome }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run AI Security Auditor
        id: audit_step
        run: |
          FILEPATH="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.filepath || 'test' }}"
          
          echo "üîç Running security audit on: $FILEPATH"
          
          # Capture both stdout and stderr
          if python3 main.py "$FILEPATH" > audit_output.txt 2>&1; then
            AUDIT_RESULT="success"
            echo "‚úÖ Security audit passed"
          else
            AUDIT_RESULT="failed"
            echo "‚ùå Security audit failed"
          fi
          
          # Read the output and set as output variable (escape newlines)
          AUDIT_OUTPUT=$(cat audit_output.txt | sed ':a;N;$!ba;s/\n/\\n/g' | sed 's/"/\\"/g')
          echo "audit_results=$AUDIT_OUTPUT" >> $GITHUB_OUTPUT
          echo "audit_outcome=$AUDIT_RESULT" >> $GITHUB_OUTPUT
          
          # Display the results
          cat audit_output.txt
          
          # Exit with appropriate code
          if [ "$AUDIT_RESULT" = "failed" ]; then
            exit 1
          fi
        env:
          HUGGING_FACE_HUB_TOKEN: ${{ secrets.HUGGING_FACE_HUB_TOKEN }}

      - name: Check Audit Results
        if: ${{ failure() && steps.audit_step.outcome == 'failure' }}
        run: |
          echo "‚ùå AI Security Auditor found vulnerabilities. Failing the workflow."
  
  add-pr-comment:
    needs: iac-security-audit
    runs-on: ubuntu-latest
    # This condition ensures the job runs on pull requests regardless of audit outcome
    if: always() && github.event_name == 'pull_request'
    steps:
      - name: Post Audit Results as a PR Comment
        uses: actions/github-script@v7
        env:
          AUDIT_OUTCOME: ${{ needs.iac-security-audit.outputs.audit-outcome }}
          AUDIT_RESULTS: ${{ needs.iac-security-audit.outputs.audit-results }}
          FILEPATH: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.filepath || 'test' }}
        with:
          script: |
            const auditOutcome = process.env.AUDIT_OUTCOME;
            const auditResults = process.env.AUDIT_RESULTS;
            const filepath = process.env.FILEPATH;
            
            let commentBody = `## üîç AI Security Audit Results\n\n`;
            commentBody += `**Path analyzed:** \`${filepath}\`\n\n`;
            
            if (auditOutcome === 'success') {
              commentBody += `‚úÖ **PASSED** - No security vulnerabilities detected!\n\n`;
              commentBody += `All Terraform files have been analyzed and no security issues were found.`;
            } else {
              commentBody += `‚ùå **FAILED** - Security vulnerabilities detected!\n\n`;
              
              if (auditResults && auditResults.trim()) {
                // Clean up and format the audit results
                let formattedResults = auditResults
                  .replace(/\\n/g, '\n')  // Convert \n to actual newlines
                  .replace(/üîç Auditing directory:.*?\n/g, '')  // Remove directory info
                  .replace(/ü§ñ Initializing AI security auditor.*?\n/g, '')  // Remove init messages
                  .replace(/‚úÖ AI security auditor initialized successfully\.\n/g, '')  // Remove success message
                  .replace(/--- Analyzing '([^']+)' ---/g, '### üìÑ File: `$1`')  // Format file headers
                  .replace(/ü§ñ Sending request to remote AI model\.\.\.\n/g, '')  // Remove API messages
                  .replace(/Security Analysis Result for '[^']+':?\n/g, '')  // Remove redundant headers
                  .replace(/An unexpected error occurred while processing ([^:]+): (.+)/g, '‚ö†Ô∏è **Error analyzing `$1`:** $2')  // Format errors
                  .replace(/‚ùå Security vulnerabilities detected\. Failing the check\./g, '')  // Remove final message
                  .trim();
                
                // Split into sections for better formatting
                const sections = formattedResults.split(/### üìÑ File: `([^`]+)`/);
                let processedContent = '';
                
                for (let i = 1; i < sections.length; i += 2) {
                  const fileName = sections[i];
                  const fileContent = sections[i + 1]?.trim() || '';
                  
                  processedContent += `---\n\n### üìÑ File: \`${fileName}\`\n\n`;
                  
                  if (fileContent.includes('‚ö†Ô∏è **Error')) {
                    processedContent += fileContent + '\n\n';
                  } else if (fileContent.includes('‚úÖ No security issues found')) {
                    processedContent += '‚úÖ **No security issues found in this file**\n\n';
                  } else if (fileContent.trim()) {
                    // Format vulnerability details and remove large code blocks
                    let formattedContent = fileContent
                      .replace(/- \*\*Vulnerability:\*\*/g, '**üö® Vulnerability:**')
                      .replace(/- \*\*Risk:\*\*/g, '\n\n**‚ö†Ô∏è Risk:**')
                      .replace(/- \*\*Remediation:\*\*/g, '\n\n**üõ†Ô∏è Remediation:**')
                      .replace(/```hcl[\s\S]*?```/g, '\n\n*üìã Complete remediation code examples are available in the workflow run logs.*')
                      .replace(/```[\s\S]*?```/g, '\n\n*üìã Complete remediation code examples are available in the workflow run logs.*')
                      .replace(/resource\s+"[^"]+"\s+"[^"]+"\s+\{[\s\S]*?\n\}/g, '\n\n*üìã Complete remediation code examples are available in the workflow run logs.*');
                    
                    processedContent += formattedContent + '\n\n';
                  }
                }
                
                commentBody += processedContent;
              } else {
                commentBody += `Please check the workflow run for detailed vulnerability information.\n\n`;
              }
              
              commentBody += `---\n\n`;
              commentBody += `**üõ†Ô∏è Next Steps:**\n`;
              commentBody += `1. Review the vulnerability details above\n`;
              commentBody += `2. Apply the recommended fixes to your Terraform code\n`;
              commentBody += `3. Push your changes to re-run the security audit\n\n`;
            }
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });
